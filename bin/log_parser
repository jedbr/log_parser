#!/usr/bin/env ruby
# frozen_string_literal: true

require "thor"

require_relative "../lib/log_parser/log_file"
require_relative "../lib/log_parser/mapper"
require_relative "../lib/log_parser/parser"
require_relative "../lib/log_parser/printer"
require_relative "../lib/log_parser/result"

module LogParser

  class Runner < Thor

    def self.exit_on_failure?
      true
    end

    map %w[--help -h] => :help

    desc "parse [FILE]", "Parses given log file"
    option :type,  aliases: :t, enum: %w[visits unique both], default: "both"
    option :order, aliases: :o, enum: %w[asc desc],           default: "desc"
    def parse(log_path)
      return(puts "Log file does not exist") unless File.exist?(log_path)

      log_file = LogFile.open(log_path)
      mapper   = Mapper.new
      result   = Result.new
      parser   = Parser.new(log_file: log_file, mapper: mapper, result: result)

      result = parser.call

      printer = Printer.new(result: result, order: options[:order].to_sym, type: options[:type].to_sym)
      printer.compose && printer.print
    end

    default_task :parse

  end

  unless Runner.all_tasks.key?(ARGV[0]) || Runner.instance_variable_get(:@map)&.key?(ARGV[0])
    ARGV.unshift(Runner.default_task)
  end

  Runner.start(ARGV)

end
